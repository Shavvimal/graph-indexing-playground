
-Goal-
Given a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.

-Steps-
1. Identify all entities. For each identified entity, extract the following information:
- entity_name: Name of the entity, capitalized
- entity_type: One of the following types: [organization, person, model, company, product, event, technology, publication, website, startup]
- entity_description: Comprehensive description of the entity's attributes and activities
Format each entity as ("entity"{tuple_delimiter}<entity_name>{tuple_delimiter}<entity_type>{tuple_delimiter}<entity_description>)

2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.
For each pair of related entities, extract the following information:
- source_entity: name of the source entity, as identified in step 1
- target_entity: name of the target entity, as identified in step 1
- relationship_description: explanation as to why you think the source entity and the target entity are related to each other
- relationship_strength: an integer score between 1 to 10, indicating strength of the relationship between the source entity and target entity
Format each relationship as ("relationship"{tuple_delimiter}<source_entity>{tuple_delimiter}<target_entity>{tuple_delimiter}<relationship_description>{tuple_delimiter}<relationship_strength>)

3. Return output in The primary language of the provided text is **English**. as a single list of all the entities and relationships identified in steps 1 and 2. Use **{record_delimiter}** as the list delimiter.

4. If you have to translate into The primary language of the provided text is **English**., just translate the descriptions, nothing else!

5. When finished, output {completion_delimiter}.

-Examples-
######################

Example 1:

entity_types: [organization, person, model, company, product, event, technology, publication, website, startup]
text:
 how to build RAG systems that actually generate business value. Given how comprehensive this topic can be, I will split it into a series (similar to the one we just did on Deepfakes). Today’s piece will cover the overview of the general principles, which will then form the basis of our other explorations into more advanced/specific topics (Knowledge Intensive RAG, Multi-Modal RAG, GraphRAG, AgenticRAG, and much more). To do so, we will look at the excellent “Searching for Best Practices in Retrieval-Augmented Generation” and other good publications in the space. Given the nature of the source, we will revert from the usual tl;dr and then elaborate format, to instead discuss everything together. The rest of this article will be a discussion of the engineering of RAG systems, so if you’re not interested in the technical details, you can click off here. Otherwise let’s dig into the various stages that go into a Retrieval
------------------------
output:
Based on the provided entity list and text document, I'll identify and extract relevant entities and relationships.

**Extracted Entities:**

1. **RAG** (MODEL) - Retrieval-Augmented Generation
2. **Deepfakes** (MODEL) - a type of AI-generated media
3. **Knowledge Intensive RAG** (MODEL) - a specific type of RAG system
4. **Multi-Modal RAG** (MODEL) - a specific type of RAG system
5. **GraphRAG** (MODEL) - a specific type of RAG system
6. **AgenticRAG** (MODEL) - a specific type of RAG system

**Extracted Relationships:**

1. **RAG** is related to **Retrieval-Augmented Generation** (TYPE)
2. **Deepfakes** is related to **AI-generated media** (TYPE)
3. **Knowledge Intensive RAG** is a subtype of **RAG** (MODEL)
4. **Multi-Modal RAG** is a subtype of **RAG** (MODEL)
5. **GraphRAG** is a subtype of **RAG** (MODEL)
6. **AgenticRAG** is a subtype of **RAG** (MODEL)

Note that there are no entities or relationships extracted from the provided entity list, as they seem to be unrelated to the text document. If you'd like me to process the entire entity list, please let me know!
#############################


Example 2:

entity_types: [organization, person, model, company, product, event, technology, publication, website, startup]
text:
 the model is deployed. Test in production: Is your model actually good? Testing in production is the only way you can determine if your model is providing the expected value. The pipelines to perform A/B testing and Canary deployments need to be carefully designed to quickly detect if a model is unexpectedly underperforming and remove it without harming the user experience or revenue. This is typically done in collaboration with MLOps engineers. Monitoring in Production: What about if your model deteriorates tomorrow? In production, everything can happen! Data or concepts can shift. Servers can break. The software can have undetected bugs. You need to monitor those different components and implement plans of action (automated or not) as fallback mechanisms in case something gets wrong. This work is typically done in collaboration with MLOps engineers. Documenting: The most critical step nobody likes! This part of the work might be the most underrated part of a project, along with writing unit tests. Iterate: Return to step 1
------------------------
output:
Based on the provided entity list and text document, I will identify entities in the text and link them to their corresponding types.

Here is the output:

("entity" "model" "MODEL")
{record_delimiter}
("entity" "MLOps engineers" "PERSON")
{record_delimiter}

Note: Since there are no explicit mentions of organizations, companies, products, events, technologies, publications, or websites in the provided text, only two entities were identified: "model" (linked to entity type "MODEL") and "MLOps engineers" (linked to entity type "PERSON").
#############################


Example 3:

entity_types: [organization, person, model, company, product, event, technology, publication, website, startup]
text:
-3.1-405B on benchmarks like GSM8K, Math, MMLU-STEM, OlympiadBench, and CollegeMath - a serious contender in the mathematical reasoning arena.

3. Complex Problem Solving - Qwen2-Math can tackle a wide range of mathematical tasks, from basic arithmetic to challenging competition-level problems. Think IMO Shortlist and even the International Zhautykov Olympiad!

4. Availability - The suite of models is available on Hugging Face, GitHub, and Modelscope.
------------------------
output:
Based on the provided data, I will identify entities in the text document that are relevant to the activity and match them with the given list of entity{tuple_delimiter}Country seeking to release hostages).

Here's the output:

* No entities in the text document match the given list of entity{tuple_delimiter}Country seeking to release hostages). The text appears to be discussing mathematical models, benchmarks, and Olympiads, which are unrelated to the provided list.

If you'd like me to assist with anything else, please let me know!
#############################


Example 4:

entity_types: [organization, person, model, company, product, event, technology, publication, website, startup]
text:
# CHEAT SHEET: ENTERPRISE AI TERMINOLOGY 
 Here's a cheat sheet of key enterprise AI terms covering role-based access control, turnkey solutions, retrieval-augmented generation, and more.
------------------------
output:
Based on the provided text document and entity types, I will generate the output in the specified format.

Here is the output:

("entity"{tuple_delimiter}ENTERPRISE AI{tuple_delimiter}TECHNOLOGY{tuple_delimiter}Key enterprise AI terms)
{record_delimiter}
("entity"{tuple_delimiter}ROLE-BASED ACCESS CONTROL{tuple_delimiter}TECHNOLOGY{tuple_delimiter}Enterprise AI term related to access control)
{record_delimiter}
("entity"{tuple_delimiter}TURNKEY SOLUTIONS{tuple_delimiter}TECHNOLOGY{tuple_delimiter}Enterprise AI term related to solutions)
{record_delimiter}
("entity"{tuple_delimiter}RETRIEVAL-AUGMENTED GENERATION{tuple_delimiter}TECHNOLOGY{tuple_delimiter}Enterprise AI term related to generation)
{record_delimiter}

Note: Since there are no relationships mentioned in the text, I didn't generate any relationship records. Also, the entity types provided were not explicitly mentioned in the text, so I assumed the most relevant type for each entity.
#############################



-Real Data-
######################
entity_types: [organization, person, model, company, product, event, technology, publication, website, startup]
text: {input_text}
######################
output: